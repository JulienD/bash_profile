# Hello_world.
echo `date +"%A %e %B %Y"` `date +"%H"` h `date +"%M"`

#-------------------------------------------------------------
# Settings
#-------------------------------------------------------------
## Don't want my shell to warn me of incoming mail.
shopt -u mailwarn
unset MAILCHECK

#-------------------------------------------------------------
# Bash history
#-------------------------------------------------------------
# History length.
HISTSIZE=1000
# Bash history file length.
HISTFILESIZE=10000
# Don't put duplicate lines in the history. See bash(1) for more
# options or force ignoredups and ignorespace.
HISTCONTROL=ignoredups:ignorespaec
# Append the history to the histfile instead of overwriting it.
shopt -s histappend
# Update & re-read histfile after every cmd so terminals will share.
export PROMPT_COMMAND="history -n; history -a"

#-------------------------------------------------------------
# Terminal properties
#-------------------------------------------------------------
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

#-------------------------------------------------------------
# Terminal colors
#-------------------------------------------------------------
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
color_prompt=yes
    else
color_prompt=
    fi
fi

# Git Branch identification.
n=`tput setaf 6`
c_blue=`tput setaf 4`
c_red=`tput setaf 1`
c_green=`tput setaf 2`
c_sgr0=`tput sgr0`

parse_git_branch () {
  if git rev-parse --git-dir >/dev/null 2>&1
  then
     gitver=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
  else
    return 0
  fi
  echo -e " ($gitver)"
}
 
branch_color () {
  if git rev-parse --git-dir >/dev/null 2>&1
  then
    color=""
    if git diff --quiet 2>/dev/null >&2
    then
      color="${c_green}"
    else
      color=${c_red}
    fi
  else
    return 0
  fi
  echo -ne $color
}

if [ "$color_prompt" = yes ]; then
  set_green='\[\033[0;32m\]'
  set_yellow='\[\033[1;33m\]'
  set_red='\[\033[0;31m\]'
  set_blue='\[\033[0;34m\]'
  reset='\[\033[00m\]'
  PS1_CHROOT="${debian_chroot:+($debian_chroot)}$set_green\u$set_yellow@$set_red\h$reset:"
  PS1_CWD="$set_blue\w"
  PSI_GIT_BRANCH='$(branch_color)$(parse_git_branch)'  
  PS1_TRAIL="$reset\$ "
else
  PS1_CHROOT='${debian_chroot:+($debian_chroot)}\u@\h:'
  PS1_CWD='\w'
  PSI_GIT_BRANCH='$(branch_color)$(parse_git_branch)'  
  PS1_TRAIL=' > '
fi
PS1="$PS1_CHROOT$PS1_CWD$PSI_GIT_BRANCH$PS1_TRAIL"
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#-------------------------------------------------------------
# Alias definitions
#-------------------------------------------------------------
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

#-------------------------------------------------------------
# Generic Aliases
#-------------------------------------------------------------
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'
alias h='history'
alias du='du -kh'
alias df='df -kTh'

#-------------------------------------------------------------
# ls aliases
#-------------------------------------------------------------
alias ll="ls -l --group-directories-first"
alias ls='ls -hF --color' # add colors for filetype recognition
alias la='ls -lah' # show hidden files
alias lx='ls -lXBh' # sort by extension
alias lk='ls -lSh' # sort by size, biggest last
alias lt='ls -lth' # sort by date, most recent first
alias ltr='ls -ltrh' # sort by date, most recent last

#-------------------------------------------------------------
# spelling typos
#-------------------------------------------------------------
alias xs='cd'
alias vf='cd'
alias moer='more'
alias moew='more'
alias kk='ll'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'

#-------------------------------------------------------------
# git branch identification
#-------------------------------------------------------------
# Make git branch info available in the prompt.
# See ~/.git-completion.bash for more info.
source ~/.git-completion.bash
complete -o default -o nospace -F _git_branch gb
complete -o default -o nospace -F _git_checkout gc